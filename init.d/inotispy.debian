#! /bin/sh
### BEGIN INIT INFO
# Provides:          inotispy
# Required-Start:    $network $local_fs $remote_fs $syslog 
# Required-Stop:     $network $local_fs $remote_fs $syslog 
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: efficient inotify daemon
# Description: Inotispy is an efficient file system change notification daemon
#              built on top of the Inotify kernel module. It recursively watches
#              directory trees, queues file system events that occur within those
#              trees, and delivers those events to client applications via ZeroMQ
#              sockets.
### END INIT INFO

# Author: James Conerly <james.conerly@gmail.com>

PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="inotispy daemon"
NAME=inotispy
DAEMON=/usr/sbin/$NAME
DAEMON_ARGS="--daemon"
PIDFILE=/var/run/inotispy/inotispy.pid
CONFDUMPFILE=/var/run/inotispy/config.dump
SCRIPTNAME=/etc/init.d/$NAME

# Exit if the package is not installed
[ -x "$DAEMON" ] || exit 0

# Read configuration variable file if it is present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.2-14) to ensure that this file is present
# and status_of_proc is working.
. /lib/lsb/init-functions

status_inotispy()
{
    if [ -e "$PIDFILE" ]; then
        PID=`cat $PIDFILE`
        if [ -d "/proc/$PID" ]; then
            if [ ! "$1" ]; then
                echo "$NAME (pid  $PID) is running"
            fi
            return 1
        else
            if [ ! "$1" ]; then
                echo "$NAME is not running"
            fi
        fi
    fi
    if [ ! "$1" ]; then
        echo "$NAME is not running"
    fi
    return 0
}

start_inotispy()
{
    start-stop-daemon --start --quiet --pidfile $PIDFILE \
        --exec $DAEMON --test > /dev/null \
        || return 1

    start-stop-daemon --start --quiet --pidfile $PIDFILE \
        --exec $DAEMON -- $DAEMON_ARGS \
        || return 2
}

stop_inotispy()
{
    start-stop-daemon --stop --quiet --oknodo --pidfile $PIDFILE

    RETVAL="$?"
    [ "$RETVAL" = 2 ] && return 2

    rm -f $PIDFILE
    rm -f $CONFDUMPFILE

    return "$RETVAL"
}

reload_inotispy()
{
    start-stop-daemon --stop --quiet --signal HUP --pidfile $PIDFILE
}

dump_config()
{
    if [ -e "$CONFDUMPFILE" ]; then
        echo
        cat $CONFDUMPFILE
        echo
        echo -n Running as pid:\  
        cat $PIDFILE
        echo
        echo
        return 0
    fi
}

case "$1" in
    start)
        log_begin_msg "Starting $DESC"
        start_inotispy
        log_end_msg $?
        ;;
    stop)
        log_begin_msg "Stopping $DESC"
        stop_inotispy
        log_end_msg $?
        ;;
    status|stat)
        status_inotispy
        ;;
    restart)
        log_begin_msg "Restarting $DESC"
        stop_inotispy
        sleep 1
        start_inotispy
        log_end_msg $?
        ;;
    reload)
        log_begin_msg "Reloading $DESC"
        reload_inotispy
        log_end_msg $?
        ;;
    config|conf)
        dump_config
        ;;
    *)
        echo "Usage: $0 {start|stop|status|restart|reload|config}" >&2
        exit 1
        ;;
esac

exit 0;
